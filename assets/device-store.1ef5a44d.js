import{W as f}from"./index.847c9bb9.js";import{g as a,c,d as r,a as o,p as d,o as p,b as h}from"./firebaseConfig.4f4498d5.js";const w=f("deviceStore",{state:()=>({rooms:[],printers:[]}),getters:{},actions:{async fetchRoom(){const i=await a(c(r,"rooms"));this.rooms=i.docs.map(s=>{const t=s.data();return{id:s.id,description:t.description,price:t.price,isAvailable:t.isAvailable}})},async saveRoom(i){if(!i.id)throw new Error("Room ID is not set");i.isAvailable=!0;const s=o(r,"rooms",i.id);await d(s,{...i}),this.rooms.push({...i})},async deleteRoom(i){await p(o(r,"room",i)),this.rooms=this.rooms.filter(s=>s.id!==i)},async updateRoom(i){if(!i.id)throw new Error("Room must have an ID for updating");const s=o(r,"room",i.id),t={id:i.id,description:i.description,price:i.price,isAvailable:i.isAvailable};await h(s,t);const e=this.rooms.findIndex(n=>n.id===i.id);e!==-1&&(this.rooms[e]=i)},async fetchPrinter(){const i=await a(c(r,"printer"));this.printers=i.docs.map(s=>{const t=s.data();return{id:s.id,description:t.description}})},async savePrinter(i){if(!i.id)throw new Error("Printer ID is not set");const s=o(r,"printer",i.id);await d(s,{...i}),this.printers.push({...i})},async deletePrinter(i){await p(o(r,"printer",i)),this.printers=this.printers.filter(s=>s.id!==i)},async updatePrinter(i){if(!i.id)throw new Error("Printer must have an ID for updating");const s=o(r,"room",i.id),t={id:i.id,description:i.description};await h(s,t);const e=this.printers.findIndex(n=>n.id===i.id);e!==-1&&(this.printers[e]=i)}}});export{w as u};
